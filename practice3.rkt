#lang racket
(display "Практика 3: Списки \n")
(display "Вариант 1. \n")
(define firstList (list 0 2 3 4 5))
(define secondList (list 6 7 8 9 10))
(define (task1 arg)
  (cond ((and (= (remainder arg 1) 0) (> arg 0)) (list secondList))
  (else (append secondList firstList))))
(display (task1 (first firstList)))
(display "\n")

(display "Вариант 2. \n")
(define (task2 arg)
  (cond ((list? arg)
        (last arg))
        (else (sqrt arg))))
(display (task2 4))
(display "\n")
(display (task2 firstList))

(display "\n")

(display "Вариант 7. \n")
(define list7_1 (list 1 3 5 7 9 11 13))
(define list7_2 (list "1" "3" "5" "7" "9" "11" "13"))
(define (task7 arg)
  (cond ((number? (list-ref arg 0))
        (+(+ (list-ref arg 0) (list-ref arg 2)) (list-ref arg 6)))
        (else (last arg))))
(display (task7 list7_1))
(display "\n")
(display (task7 list7_2))
(display "\n")